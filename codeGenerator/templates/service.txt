package {{.servicePackageName}}

import (
	"errors"
	"readygo/zorm"
)

//Save{{.structName}} 保存{{.tableComment}}
//如果入参dbConnection为nil,使用defaultDao开启事务并最后提交.如果入参dbConnection没有事务,调用dbConnection.begin()开启事务并最后提交.如果入参dbConnection有事务,只使用不提交,有开启方提交事务.但是如果遇到错误或者异常,虽然不是事务的开启方,也会回滚事务,让事务尽早回滚
func Save{{.structName}}(dbConnection *zorm.DBConnection, {{.pname}} *{{.packageName}}.{{.structName}}) error {

    // {{.pname}}对象指针不能为空
	if  {{.pname}} == nil {
		return errors.New(" {{.pname}}对象指针不能为空")
	}
    //匿名函数return的error如果不为nil,事务就会回滚
	_, errSave{{.structName}} := zorm.Transaction(dbConnection,func(dbConnection *zorm.DBConnection) (interface{}, error) {

		//事务下的业务代码开始

        //赋值ID主键
		if len({{.pname}}.Id) < 1 {
			{{.pname}}.Id = zorm.GenerateStringID()
		}


		errSave{{.structName}} := zorm.SaveStruct(dbConnection, {{.pname}})


		if errSave{{.structName}} != nil {
			return nil, errSave{{.structName}}
		}

		return nil, nil
		//事务下的业务代码结束

	})

	//记录错误
	if errSave{{.structName}} != nil {
		errSave{{.structName}} := fmt.Errorf("{{.servicePackageName}}.Save{{.structName}}错误:%w", errSave{{.structName}})
		logger.Error(errSave{{.structName}})
		return errSave{{.structName}}
	}

	return nil
}

//Update{{.structName}} 更新{{.tableComment}}
//如果入参dbConnection为nil,使用defaultDao开启事务并最后提交.如果入参dbConnection没有事务,调用dbConnection.begin()开启事务并最后提交.如果入参dbConnection有事务,只使用不提交,有开启方提交事务.但是如果遇到错误或者异常,虽然不是事务的开启方,也会回滚事务,让事务尽早回滚
func Update{{.structName}}(dbConnection *zorm.DBConnection, {{.pname}} *{{.packageName}}.{{.structName}}) error {
	
    //匿名函数return的error如果不为nil,事务就会回滚
	_, errUpdate{{.structName}} := zorm.Transaction(dbConnection,func(dbConnection *zorm.DBConnection) (interface{}, error) {

		//事务下的业务代码开始
		errUpdate{{.structName}} := zorm.UpdateStruct(dbConnection, {{.pname}})


		if errUpdate{{.structName}} != nil {
			return nil, errUpdate{{.structName}}
		}

		return nil, nil
		//事务下的业务代码结束

	})

	//记录错误
	if errUpdate{{.structName}} != nil {
		errUpdate{{.structName}} := fmt.Errorf("{{.servicePackageName}}.Update{{.structName}}错误:%w", errUpdate{{.structName}})
		logger.Error(errUpdate{{.structName}})
		return errUpdate{{.structName}}
	}

	return nil
}

//Delete{{.structName}} 删除{{.tableComment}}
//如果入参dbConnection为nil,使用defaultDao开启事务并最后提交.如果入参dbConnection没有事务,调用dbConnection.begin()开启事务并最后提交.如果入参dbConnection有事务,只使用不提交,有开启方提交事务.但是如果遇到错误或者异常,虽然不是事务的开启方,也会回滚事务,让事务尽早回滚
func Delete{{.structName}}(dbConnection *zorm.DBConnection, {{.pname}} *{{.packageName}}.{{.structName}}) error {
	
    //匿名函数return的error如果不为nil,事务就会回滚
	_, errDelete{{.structName}} := zorm.Transaction(dbConnection,func(dbConnection *zorm.DBConnection) (interface{}, error) {

		//事务下的业务代码开始
		errDelete{{.structName}} := zorm.DeleteStruct(dbConnection, {{.pname}})


		if errDelete{{.structName}} != nil {
			return nil, errDelete{{.structName}}
		}

		return nil, nil
		//事务下的业务代码结束

	})

    //记录错误
	if errDelete{{.structName}} != nil {
		errDelete{{.structName}} := fmt.Errorf("{{.servicePackageName}}.Delete{{.structName}}错误:%w", errDelete{{.structName}})
		logger.Error(errDelete{{.structName}})
		return errDelete{{.structName}}
	}

	return nil
}

//Find{{.structName}}ById 根据Id查询{{.tableComment}}信息
//dbConnection如果为nil,则会使用默认的datasource进行无事务查询
func Find{{.structName}}ById(dbConnection *zorm.DBConnection, id string) (*{{.packageName}}.{{.structName}}, error) {
	//如果Id为空
	if len(id) < 1 {
		return nil, errors.New("id为空")
	}

	//根据Id查询
	finder := zorm.NewSelectFinder({{.packageName}}.{{.structName}}TableName).Append(" WHERE id=?", id)
	{{.pname}} := {{.packageName}}.{{.structName}}{}
	errFind{{.structName}}ById := zorm.QueryStruct(dbConnection, finder, &{{.pname}})

	//记录错误
	if errFind{{.structName}}ById != nil {
		errFind{{.structName}}ById := fmt.Errorf("{{.servicePackageName}}.Find{{.structName}}ById错误:%w", errFind{{.structName}}ById)
		logger.Error(errFind{{.structName}}ById)
		return nil, errFind{{.structName}}ById
	}

	return &{{.pname}}, nil

}

//Find{{.structName}}List 根据Finder查询{{.tableComment}}列表
//dbConnection如果为nil,则会使用默认的datasource进行无事务查询
func Find{{.structName}}List(dbConnection *zorm.DBConnection, finder *zorm.Finder, page *zorm.Page) ([]{{.packageName}}.{{.structName}}, error) {
	{{.pname}}List := make([]{{.packageName}}.{{.structName}}, 0)
	errFind{{.structName}}List := zorm.QueryStructList(dbConnection, finder, &{{.pname}}List, page)

	//记录错误
	if errFind{{.structName}}List != nil {
		errFind{{.structName}}List := fmt.Errorf("{{.servicePackageName}}.Find{{.structName}}List错误:%w", errFind{{.structName}}List)
		logger.Error(errFind{{.structName}}List)
		return nil, errFind{{.structName}}List
	}

	return {{.pname}}List, nil
}
