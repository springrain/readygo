package {{.servicePackageName}}

import (
	"errors"
	"readygo/orm"
)

//Save{{.structName}} 保存{{.tableComment}}
//如果入参session为nil或者没事务,则会使用默认的datasource的开启事务并最后提交.如果session有事务,则只使用,不提交,有开启方提交事务.但是如果遇到错误或者异常,虽然不是事务的开启方,也会回滚事务,让事务尽早回滚
func Save{{.structName}}(session *orm.Session, {{.pname}} *{{.packageName}}.{{.structName}}) error {

    //匿名函数return的error如果不为nil,事务就会回滚
	_, save{{.structName}}Err := orm.Transaction(session,func(session *orm.Session) (interface{}, error) {

		//事务下的业务代码开始
		save{{.structName}}Err := orm.SaveStruct(session, {{.pname}})


		if save{{.structName}}Err != nil {
			return nil, save{{.structName}}Err
		}

		return nil, nil
		//事务下的业务代码结束

	})

	//记录错误
	if save{{.structName}}Err != nil {
		save{{.structName}}Err := fmt.Errorf("{{.servicePackageName}}.Save{{.structName}}错误:%w", save{{.structName}}Err)
		logger.Error(save{{.structName}}Err)
		return save{{.structName}}Err
	}

	return nil
}

//Update{{.structName}} 更新{{.tableComment}}
//如果入参session为nil或者没事务,则会使用默认的datasource的开启事务并最后提交.如果session有事务,则只使用,不提交,有开启方提交事务.但是如果遇到错误或者异常,虽然不是事务的开启方,也会回滚事务,让事务尽早回滚
func Update{{.structName}}(session *orm.Session, {{.pname}} *{{.packageName}}.{{.structName}}) error {
	
    //匿名函数return的error如果不为nil,事务就会回滚
	_, update{{.structName}}Err := orm.Transaction(session,func(session *orm.Session) (interface{}, error) {

		//事务下的业务代码开始
		update{{.structName}}Err := orm.UpdateStruct(session, {{.pname}})


		if update{{.structName}}Err != nil {
			return nil, update{{.structName}}Err
		}

		return nil, nil
		//事务下的业务代码结束

	})

	//记录错误
	if update{{.structName}}Err != nil {
		update{{.structName}}Err := fmt.Errorf("{{.servicePackageName}}.Update{{.structName}}错误:%w", update{{.structName}}Err)
		logger.Error(update{{.structName}}Err)
		return update{{.structName}}Err
	}

	return nil
}

//Delete{{.structName}} 删除{{.tableComment}}
//如果入参session为nil或者没事务,则会使用默认的datasource的开启事务并最后提交.如果session有事务,则只使用,不提交,有开启方提交事务.但是如果遇到错误或者异常,虽然不是事务的开启方,也会回滚事务,让事务尽早回滚
func Delete{{.structName}}(session *orm.Session, {{.pname}} *{{.packageName}}.{{.structName}}) error {
	
    //匿名函数return的error如果不为nil,事务就会回滚
	_, delete{{.structName}}Err := orm.Transaction(session,func(session *orm.Session) (interface{}, error) {

		//事务下的业务代码开始
		delete{{.structName}}Err := orm.DeleteStruct(session, {{.pname}})


		if delete{{.structName}}Err != nil {
			return nil, delete{{.structName}}Err
		}

		return nil, nil
		//事务下的业务代码结束

	})

    //记录错误
	if delete{{.structName}}Err != nil {
		delete{{.structName}}Err := fmt.Errorf("{{.servicePackageName}}.Delete{{.structName}}错误:%w", delete{{.structName}}Err)
		logger.Error(delete{{.structName}}Err)
		return delete{{.structName}}Err
	}

	return nil
}

//Find{{.structName}}ById 根据Id查询{{.tableComment}}信息
//session如果为nil,则会使用默认的datasource进行无事务查询
func Find{{.structName}}ById(session *orm.Session, id string) (*{{.packageName}}.{{.structName}}, error) {
	//如果Id为空
	if len(id) < 1 {
		return nil, errors.New("id为空")
	}

	//根据Id查询
	finder := orm.NewSelectFinder(" WHERE id=?", id)
	{{.pname}} := {{.packageName}}.{{.structName}}{}
	find{{.structName}}ByIdErr := orm.QueryStruct(session, finder, &{{.pname}})

	//记录错误
	if find{{.structName}}ByIdErr != nil {
		find{{.structName}}ByIdErr := fmt.Errorf("{{.servicePackageName}}.Find{{.structName}}ById错误:%w", find{{.structName}}ByIdErr)
		logger.Error(find{{.structName}}ByIdErr)
		return nil, find{{.structName}}ByIdErr
	}

	return &{{.pname}}, nil

}

//Find{{.structName}}List 根据Finder查询{{.tableComment}}列表
//session如果为nil,则会使用默认的datasource进行无事务查询
func Find{{.structName}}List(session *orm.Session, finder *orm.Finder, page *orm.Page) ([]{{.packageName}}.{{.structName}}, error) {
	{{.pname}}List := make([]{{.packageName}}.{{.structName}}, 0)
	find{{.structName}}ListErr := orm.QueryStructList(session, finder, &{{.pname}}List, page)

	//记录错误
	if find{{.structName}}ListErr != nil {
		find{{.structName}}ListErr := fmt.Errorf("{{.servicePackageName}}.Find{{.structName}}List错误:%w", find{{.structName}}ListErr)
		logger.Error(find{{.structName}}ListErr)
		return nil, find{{.structName}}ListErr
	}

	return {{.pname}}List, nil
}
