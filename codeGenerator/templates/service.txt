package {{.servicePackageName}}

import (
	"errors"
	"readygo/orm"
)

//保存{{.tableComment}},session参数是为了保证在其他事务内,可以为nil
func Save{{.structName}}(session *orm.Session, {{.pname}} *{{.packageName}}.{{.structName}}) error {

	if session != nil { //如果在其他的事务内
		err := orm.GetDefaultDao().SaveStruct(session, {{.pname}})
		if err != nil {
			return err
		}
		return nil
	}

	//不再其他事务内,新开事务
	_, err := orm.GetDefaultDao().Transaction(func(session *orm.Session) (interface{}, error) {
		//事务下的业务代码

		err := orm.GetDefaultDao().SaveStruct(session, {{.pname}})
		if err != nil {
			return nil, err
		}
		return nil, nil

	})
	if err != nil {
		return err
	}
	return nil
}

//更新{{.tableComment}},session参数是为了保证在其他事务内,可以为nil
func Update{{.structName}}(session *orm.Session, {{.pname}} *{{.packageName}}.{{.structName}}) error {

	if session != nil { //如果在其他的事务内
		err := orm.GetDefaultDao().UpdateStruct(session, {{.pname}})
		if err != nil {
			return err
		}
		return nil
	}

	//不再其他事务内,新开事务
	_, err := orm.GetDefaultDao().Transaction(func(session *orm.Session) (interface{}, error) {
		//业务代码开始

		err := orm.GetDefaultDao().UpdateStruct(session, {{.pname}})
		if err != nil {
			return nil, err
		}

		return nil, nil

		//业务代码结束

	})
	if err != nil {
		return err
	}
	return nil
}

//删除{{.tableComment}},session参数是为了保证在其他事务内,可以为nil
func Delete{{.structName}}(session *orm.Session, {{.pname}} *{{.packageName}}.{{.structName}}) error {

	if session != nil { //如果在其他的事务内
		err := orm.GetDefaultDao().UpdateStruct(session, {{.pname}})
		if err != nil {
			return err
		}
		return nil
	}

	//不再其他事务内,新开事务
	_, err := orm.GetDefaultDao().Transaction(func(session *orm.Session) (interface{}, error) {
		//业务代码开始

		err := orm.GetDefaultDao().DeleteStruct(session, {{.pname}})
		if err != nil {
			return nil, err
		}

		return nil, nil

		//业务代码结束

	})

	if err != nil {
		return err
	}
	return nil
}

//根据Id查询{{.tableComment}}信息,session参数是为了保证在其他事务内,可以为nil
func Find{{.structName}}ById(session *orm.Session, id string) (*{{.packageName}}.{{.structName}}, error) {
	//如果Id为空
	if len(id) < 1 {
		return nil, errors.New("id为空")
	}

	//根据Id查询
	finder := orm.NewSelectFinder(" WHERE id=?", id)
	{{.pname}} := {{.packageName}}.{{.structName}}{}
	err := orm.GetDefaultDao().QueryStruct(session, finder, &{{.pname}})
	if err != nil {
		return nil, err
	}
	return &{{.pname}}, nil

}

//根据Finder查询{{.tableComment}}列表,session参数是为了保证在其他事务内,可以为nil
func Find{{.structName}}List(session *orm.Session, finder *orm.Finder, page *orm.Page) ([]{{.packageName}}.{{.structName}}, error) {
	{{.pname}}List := make([]{{.packageName}}.{{.structName}}, 0)
	err := orm.GetDefaultDao().QueryStructList(session, finder, &{{.pname}}List, page)
	if err != nil {
		return nil, err
	}
	return {{.pname}}List, nil
}
